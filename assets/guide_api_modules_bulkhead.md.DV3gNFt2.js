import{t as F,V as _}from"./chunks/theme.CFNbPdFi.js";import{C as v,N as p}from"./chunks/circuit.y_FAFz-t.js";import{B as g}from"./chunks/bullets.B2tIYcfe.js";import{d as C,p as l,q as k,v as A,x as D,c as y,o as f,G as i,k as B,w as m,j as e,_ as q,C as w,a2 as V,a as o}from"./chunks/framework.DYiJ1WDi.js";const P={class:"bulkhead"},S={class:"content"},T={class:"form"},M={class:"row"},z={class:"row"},N={class:"row"},Q={class:"visualization"},W={class:"row"},O={class:"row"},R=C({__name:"bulkhead",setup(b){const u=l(null),s=l(5),n=l(4),h=l(3e3),c=l([]),E=l([]),t=new F({concurrentSize:s.value,queueSize:n.value,maxQueueWait:h.value}),x=new _({options:{modules:[t]}});k([s],()=>{t.concurrentSize=s.value}),k([s],()=>{t.queueSize=s.value}),k([h],()=>{t.maxQueueWait=h.value});function d(){c.value=t.concurrentBuffer.map(()=>"var(--vp-c-brand-2)"),E.value=t.queueBuffer.map(()=>"var(--vp-c-green-2)")}return A(()=>{t.on("update-concurrent-buffer",d),t.on("update-queue-buffer",d)}),D(()=>{t.off("update-concurrent-buffer",d),t.off("update-queue-buffer",d)}),(j,a)=>(f(),y("div",P,[i(v,{ref_key:"circuitRef",ref:u,circuit:B(x),duration:2e3},{default:m(()=>[e("div",S,[e("div",T,[e("div",M,[i(p,{modelValue:s.value,"onUpdate:modelValue":a[0]||(a[0]=r=>s.value=r),label:"Concurrent Size:"},null,8,["modelValue"])]),e("div",z,[i(p,{modelValue:n.value,"onUpdate:modelValue":a[1]||(a[1]=r=>n.value=r),label:"Queue Size:"},null,8,["modelValue"])]),e("div",N,[i(p,{modelValue:h.value,"onUpdate:modelValue":a[2]||(a[2]=r=>h.value=r),label:"Max Wait (in ms):"},null,8,["modelValue"])])]),e("div",Q,[e("div",W,[i(g,{class:"concurrent",modelValue:c.value,label:"Concurrent:"},null,8,["modelValue"])]),e("div",O,[i(g,{class:"queue",modelValue:E.value,label:"Queue:"},null,8,["modelValue"])])])])]),_:1},8,["circuit"])]))}}),U=q(R,[["__scopeId","data-v-291e1154"]]),H=JSON.parse('{"title":"Bulkhead","description":"","frontmatter":{},"headers":[],"relativePath":"guide/api/modules/bulkhead.md","filePath":"guide/api/modules/bulkhead.md"}'),I={name:"guide/api/modules/bulkhead.md"},K=Object.assign(I,{setup(b){return(u,s)=>{const n=w("ClientOnly");return f(),y("div",null,[s[0]||(s[0]=e("h1",{id:"bulkhead",tabindex:"-1"},[o("Bulkhead "),e("a",{class:"header-anchor",href:"#bulkhead","aria-label":'Permalink to "Bulkhead"'},"​")],-1)),s[1]||(s[1]=e("p",null,[o("The "),e("code",null,"Bulkhead"),o(" module allows you to "),e("strong",null,"limit"),o(" concurrent executions of your circuit.")],-1)),i(n,null,{default:m(()=>[i(U)]),_:1}),s[2]||(s[2]=V(`<h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mollitia </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mollitia&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creates a circuit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mollitia.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Circuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modules: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Creates a bulkhead module</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mollitia.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bulkhead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        concurrentSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Allows 2 concurrent requests, if reached, goes in a queue.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        queueSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Allows 2 requests to be in queue, if reached, it will be rejected with a BulkheadOverloadError.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        maxQueueWait: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30000</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // After 30 seconds waiting, a queued request will be rejected with a BulkheadQueueWaitError.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Let&#39;s say this function is running multiple times in a relatively short amount of time</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">circuit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myFunction).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The succeed normally (directly, or has been in a queue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Mollitia</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BulkheadOverloadError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // When the function has been called, the concurrent methods are at maximum, and the queue is full.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Mollitia</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BulkheadQueueWaitError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // The function has been waiting too long in queue (more than 30 seconds).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // It failed normally (directly, or has been in a queue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div><h2 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">​</a></h2><h3 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Default</th></tr></thead><tbody><tr><td style="text-align:left;"><code>concurrentSize</code></td><td style="text-align:left;">The number of concurrent requests that can be running in parallel.</td><td style="text-align:left;"><code>10</code></td></tr><tr><td style="text-align:left;"><code>queueSize</code></td><td style="text-align:left;">The number of requests that can be queued.</td><td style="text-align:left;"><code>10</code></td></tr><tr><td style="text-align:left;"><code>maxQueueWait</code></td><td style="text-align:left;">The amount of time before a queued request is rejected.</td><td style="text-align:left;"><code>60000</code></td></tr></tbody></table><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Returns</th></tr></thead><tbody><tr><td style="text-align:left;"><code>getExecParams()</code></td><td style="text-align:left;">Returns the circuit function parameters.</td><td style="text-align:left;"><code>any[]</code> <strong>params</strong></td></tr></tbody></table><h3 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Params</th></tr></thead><tbody><tr><td style="text-align:left;"><code>execute</code></td><td style="text-align:left;">Called when the module is executed.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong>, <code>Promise&lt;T&gt;</code> <strong>promise</strong>, <code>any[]</code> <strong>params</strong></td></tr><tr><td style="text-align:left;"><code>update-concurrent-buffer</code></td><td style="text-align:left;">Called when the concurrent buffer is updated.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong>, <code>BufferedPromise[]</code> <strong>buffer</strong></td></tr><tr><td style="text-align:left;"><code>update-queue-buffer</code></td><td style="text-align:left;">Called when the queue buffer is updated.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong>, <code>BufferedPromise[]</code> <strong>buffer</strong></td></tr></tbody></table>`,9))])}}});export{H as __pageData,K as default};
