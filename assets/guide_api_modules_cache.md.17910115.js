import{Z as I,V as B,N as v,C as P}from"./chunks/circuit.09598ca0.js";import{P as b}from"./chunks/progress-bar.5a5d4239.js";import{d as T,h as n,x as C,j as k,z as V,o as _,c as x,H as t,w as A,k as s,l as j,_ as O,C as q,a as r,Q as M}from"./chunks/framework.2ce6f3f6.js";import"./chunks/theme.0766ca56.js";const N={class:"cache"},S={class:"content"},R={class:"form"},H={class:"row"},U={class:"row"},$={class:"visualization"},K={class:"row"},z={class:"row"},L=T({__name:"cache",setup(w){const o=n(null),e=n(3e3),l=n(5e3),i=n(0),c=n(0),y=n(0),h=n(0),E=n(0),d=n("var(--vp-c-green-2)"),a=new I({ttl:e.value,cacheClearInterval:l.value,adjustCacheParams:()=>[]}),D=new B({options:{modules:[a]}});C([e],()=>{a.ttl=e.value}),C([l],()=>{a.cacheClearInterval=l.value});function f(){c.value&&c.value<e.value||(d.value="var(--vp-c-green-2)",y.value=Date.now(),h.value=window.setInterval(()=>{i.value=Date.now()-y.value,i.value>=o.value.duration&&clearInterval(h.value)},100),E.value=window.setInterval(()=>{c.value=Date.now()-y.value,c.value>=e.value&&(d.value="var(--vp-c-yellow-2)",clearInterval(E.value))},100))}function m(){o.value.logs.push("Hitting cache.")}function g(){o.value.logs.push("Hitting old cache on failure.")}return k(()=>{a.on("execute",f),a.on("cache-hit",m),a.on("cache-hit-old",g)}),V(()=>{a.off("execute",f),a.off("cache-hit",m),a.off("cache-hit-old",g)}),(X,p)=>(_(),x("div",N,[t(P,{ref_key:"circuitRef",ref:o,circuit:j(D)},{default:A(()=>{var F;return[s("div",S,[s("div",R,[s("div",H,[t(v,{modelValue:e.value,"onUpdate:modelValue":p[0]||(p[0]=u=>e.value=u),label:"TTL (in ms):"},null,8,["modelValue"])]),s("div",U,[t(v,{modelValue:l.value,"onUpdate:modelValue":p[1]||(p[1]=u=>l.value=u),label:"Clear Interval (in ms):"},null,8,["modelValue"])])]),s("div",$,[s("div",K,[t(b,{class:"progress",modelValue:i.value,max:(F=o.value)==null?void 0:F.duration,label:"Progress:"},null,8,["modelValue","max"])]),s("div",z,[t(b,{class:"internal",modelValue:c.value,color:d.value,max:e.value,label:"Cache Duration:"},null,8,["modelValue","color","max"])])])])]}),_:1},8,["circuit"])]))}});const J=O(L,[["__scopeId","data-v-c88518cc"]]),Q=s("h1",{id:"cache",tabindex:"-1"},[r("Cache "),s("a",{class:"header-anchor",href:"#cache","aria-label":'Permalink to "Cache"'},"​")],-1),Z=s("p",null,[r("The "),s("code",null,"Cache"),r(" module allows you to "),s("strong",null,"cache"),r(" your results for a configurable amount of time.")],-1),G=M(`<h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>Once you call a <strong>function</strong>, with some <strong>parameters</strong>, it will check if it has been cached, if so, the function will not be called at all, and will directly resolve with the cached response.</p><blockquote><p>It is important to understand that the cache works by reference!<br> That means that the cache is specifically referenced <strong>for one function</strong>, and <strong>for the same parameters</strong>.<br></p></blockquote><p>Also, when a circuit fails and have an outdated cached response (ttl has been passed), the circuit will fire the request, and will respond with the new value if it succeeds, otherwise it will resolve with the cached response.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> Mollitia </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;mollitia&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// Creates a circuit</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">circuit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Mollitia.</span><span style="color:#B392F0;">Circuit</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    modules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Creates a cache module</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Mollitia.</span><span style="color:#B392F0;">Cache</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        ttl: </span><span style="color:#79B8FF;">60000</span><span style="color:#E1E4E8;">,  </span><span style="color:#6A737D;">// A cached response will be considered as valid for 1 minute</span></span>
<span class="line"><span style="color:#E1E4E8;">        cacheClearInterval: </span><span style="color:#79B8FF;">900000</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// A cached response will be kept for 15 minutes</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// If the result is a success, it will be cached.</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> circuit.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(myFirstFunction).</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#6A737D;">// If this function is called before 1 minute is elapsed, the cached response will be returned</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> circuit.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(myFirstFunction).</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// This is a simple object</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myObject</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  myFirstParam: </span><span style="color:#9ECBFF;">&#39;myFirstValue&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">// Same as before, if that&#39;s a success, the result is cached. (The params are different, so it does not return the cache from before)</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> circuit.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(myFirstFunction).</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(myObject);</span></span>
<span class="line"><span style="color:#6A737D;">// The objects changes</span></span>
<span class="line"><span style="color:#E1E4E8;">myObject.myFirstParam </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;myFirstValuesModified&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// Nevermind, the cache works by reference, meaning the cached result is returned.</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> circuit.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(myFirstFunction).</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(myObject);</span></span>
<span class="line"><span style="color:#6A737D;">// That won&#39;t return the cached result, as the function is different</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> circuit.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(mySecondFunction).</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(myObject);</span></span>
<span class="line"><span style="color:#6A737D;">// ... After 1 minute, the function is called again.</span></span>
<span class="line"><span style="color:#E1E4E8;">circuit.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(myFirstFunction).</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(myObject)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// If the request succeeds, it returns the result normally</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// If not, the old cached response is returned</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#6A737D;">// After 15 minutes, the cache is cleared.</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> Mollitia </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;mollitia&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// Creates a circuit</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">circuit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Mollitia.</span><span style="color:#6F42C1;">Circuit</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  options: {</span></span>
<span class="line"><span style="color:#24292E;">    modules: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Creates a cache module</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Mollitia.</span><span style="color:#6F42C1;">Cache</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        ttl: </span><span style="color:#005CC5;">60000</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;">// A cached response will be considered as valid for 1 minute</span></span>
<span class="line"><span style="color:#24292E;">        cacheClearInterval: </span><span style="color:#005CC5;">900000</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// A cached response will be kept for 15 minutes</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// If the result is a success, it will be cached.</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> circuit.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(myFirstFunction).</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#6A737D;">// If this function is called before 1 minute is elapsed, the cached response will be returned</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> circuit.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(myFirstFunction).</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// This is a simple object</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myObject</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  myFirstParam: </span><span style="color:#032F62;">&#39;myFirstValue&#39;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">// Same as before, if that&#39;s a success, the result is cached. (The params are different, so it does not return the cache from before)</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> circuit.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(myFirstFunction).</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(myObject);</span></span>
<span class="line"><span style="color:#6A737D;">// The objects changes</span></span>
<span class="line"><span style="color:#24292E;">myObject.myFirstParam </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;myFirstValuesModified&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// Nevermind, the cache works by reference, meaning the cached result is returned.</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> circuit.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(myFirstFunction).</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(myObject);</span></span>
<span class="line"><span style="color:#6A737D;">// That won&#39;t return the cached result, as the function is different</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> circuit.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(mySecondFunction).</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(myObject);</span></span>
<span class="line"><span style="color:#6A737D;">// ... After 1 minute, the function is called again.</span></span>
<span class="line"><span style="color:#24292E;">circuit.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(myFirstFunction).</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(myObject)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// If the request succeeds, it returns the result normally</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// If not, the old cached response is returned</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#6A737D;">// After 15 minutes, the cache is cleared.</span></span></code></pre></div><h2 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">​</a></h2><h3 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Default</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ttl</code></td><td style="text-align:left;">The amount of time during which a cached result is considered valid.</td><td style="text-align:left;"><code>6000</code></td></tr><tr><td style="text-align:left;"><code>cacheClearInterval</code></td><td style="text-align:left;">The amount of time before the cache cleans itself up.</td><td style="text-align:left;"><code>900000</code></td></tr><tr><td style="text-align:left;"><code>getInformationFromCache</code></td><td style="text-align:left;">Specifies if the async response is retrieved from Cache (<code>res._mollitiaIsFromCache</code> is <code>true</code>)</td><td style="text-align:left;"><code>false</code></td></tr><tr><td style="text-align:left;"><code>adjustCacheParams</code></td><td style="text-align:left;">A filtering callback, to modify the parameters used for Cache Key.</td><td style="text-align:left;"><code>none</code></td></tr></tbody></table><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Returns</th></tr></thead><tbody><tr><td style="text-align:left;"><code>getExecParams()</code></td><td style="text-align:left;">Returns the circuit function parameters.</td><td style="text-align:left;"><code>any[]</code> <strong>params</strong></td></tr></tbody></table><h3 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Params</th></tr></thead><tbody><tr><td style="text-align:left;"><code>execute</code></td><td style="text-align:left;">Called when the module is executed.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong>, <code>Promise&lt;T&gt;</code> <strong>promise</strong>, <code>any[]</code> <strong>params</strong></td></tr><tr><td style="text-align:left;"><code>cache-hit</code></td><td style="text-align:left;">Called when the module returns a cached result.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong>, <code>any[]</code> <strong>cacheKeys</strong></td></tr><tr><td style="text-align:left;"><code>cache-hit-old</code></td><td style="text-align:left;">Called when the module returns an old cached result on failure.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong>, <code>any[]</code> <strong>cacheKeys</strong></td></tr></tbody></table>`,12),ns=JSON.parse('{"title":"Cache","description":"","frontmatter":{},"headers":[],"relativePath":"guide/api/modules/cache.md","filePath":"guide/api/modules/cache.md"}'),W={name:"guide/api/modules/cache.md"},ls=Object.assign(W,{setup(w){return(o,e)=>{const l=q("ClientOnly");return _(),x("div",null,[Q,Z,t(l,null,{default:A(()=>[t(J)]),_:1}),G])}}});export{ns as __pageData,ls as default};
