import{E as k,X as J,V as W,N as b,T as X,C as z}from"./chunks/circuit.96ad7feb.js";import{d as q,o as c,c as E,k as e,t as B,e as H,r as Q,_ as L,h as l,x as m,j as Y,z as G,H as r,w as I,F as N,D as M,b as K,l as Z,p as ee,m as te,C as ae,a as A,Q as se}from"./chunks/framework.b96a75df.js";import{P}from"./chunks/progress-bar.d9b4ef32.js";import"./chunks/theme.a2ff1341.js";const le="/img/retry-linear-mode.png",ne="/img/retry-exponential-mode.png",oe="/img/retry-jitter-mode-adjust0.1.png",re="/img/retry-jitter-mode-adjust0.5.png",pe="/img/retry-jitter-mode-adjust1.0.png",ie={class:"number"},ce={key:0,class:"label"},de=["value"],ye=q({__name:"select",props:{modelValue:{default:""},label:{}},emits:["update:modelValue"],setup(d){const o=d;return(n,p)=>(c(),E("div",ie,[e("label",null,[o.label?(c(),E("span",ce,B(o.label),1)):H("",!0),e("select",{value:o.modelValue,onInput:p[0]||(p[0]=y=>n.$emit("update:modelValue",y.target.value))},[Q(n.$slots,"default",{},void 0,!0)],40,de)])]))}});const ue=L(ye,[["__scopeId","data-v-0900e5ef"]]),S=d=>(ee("data-v-0fada32e"),d=d(),te(),d),me={class:"timeout"},Ee={class:"content"},he={class:"form"},fe={class:"row"},ve={class:"row"},ge={class:"row"},xe={class:"row"},be=["value"],_e={class:"row"},we={class:"row"},Ae=S(()=>e("span",null,"Fast First:",-1)),Ce={class:"row"},Fe={class:"visualization"},Ie={class:"row"},De=S(()=>e("span",null,"Progress:",-1)),je={class:"progress"},Te={class:"row"},Ve=q({__name:"retry",setup(d){const o=l(null),n=l(2),p=l(1e3),y=l(2500),f=l(k.CONSTANT),v=l(2),g=l(!1),x=l(.1),h=l(0),i=l(new Array(n.value+1).fill({progress:0,color:"var(--vp-c-brand-3)"})),_=l(0),C=l(0),w=l(0),u=l(0),s=new J({attempts:n.value,interval:p.value,maxInterval:y.value,mode:f.value,factor:v.value,fastFirst:g.value,jitterAdjustment:x.value}),O=new W({options:{modules:[s]}});m([n],()=>{s.attempts=n.value,i.value=new Array(n.value+1).fill({progress:0,color:"var(--vp-c-brand-3)"})}),m([p],()=>{s.interval=p.value}),m([y],()=>{s.maxInterval=y.value}),m([f],()=>{s.mode=f.value}),m([v],()=>{s.factor=v.value}),m([g],()=>{s.fastFirst=g.value}),m([x],()=>{s.jitterAdjustment=x.value});function D(){w.value=Date.now(),u.value=window.setInterval(()=>{i.value[h.value]={progress:Date.now()-w.value,color:"var(--vp-c-brand-3)"},i.value[h.value].progress>=o.value.duration&&clearInterval(u.value)},100)}function j(){h.value=0,i.value=new Array(n.value+1).fill({progress:0,color:"var(--vp-c-brand-3)"}),D()}function T(){clearInterval(u.value),h.value++,D()}function V($,t){o.value.logs.push(`Waiting for ${t}ms before next attempt...`),clearInterval(u.value),i.value[h.value]={progress:o.value.duration,color:"var(--vp-c-red-3)"},C.value=t,w.value=Date.now(),u.value=window.setInterval(()=>{_.value=Date.now()-w.value,_.value>=t&&clearInterval(u.value)},100)}function U(){clearInterval(u.value),i.value[h.value]={progress:o.value.duration,color:"var(--vp-c-red-3)"},_.value=C.value}return Y(()=>{s.on("execute",j),s.on("retry",T),s.on("delay-before-next-retry",V)}),G(()=>{s.off("execute",j),s.off("retry",T),s.off("delay-before-next-retry",V)}),($,t)=>(c(),E("div",me,[r(z,{ref_key:"circuitRef",ref:o,circuit:Z(O),duration:1e3,onFailure:U},{default:I(()=>[e("div",Ee,[e("div",he,[e("div",fe,[r(b,{modelValue:n.value,"onUpdate:modelValue":t[0]||(t[0]=a=>n.value=a),label:"Attempts:"},null,8,["modelValue"])]),e("div",ve,[r(b,{modelValue:p.value,"onUpdate:modelValue":t[1]||(t[1]=a=>p.value=a),label:"Interval (in ms):"},null,8,["modelValue"])]),e("div",ge,[r(b,{modelValue:y.value,"onUpdate:modelValue":t[2]||(t[2]=a=>y.value=a),label:"Max Interval (in ms):"},null,8,["modelValue"])]),e("div",xe,[r(ue,{modelValue:f.value,"onUpdate:modelValue":t[3]||(t[3]=a=>f.value=a),label:"Mode:"},{default:I(()=>[(c(!0),E(N,null,M(Object.values(k),a=>(c(),E("option",{key:a,value:a},B(a.toUpperCase()),9,be))),128))]),_:1},8,["modelValue"])]),e("div",_e,[r(b,{modelValue:v.value,"onUpdate:modelValue":t[4]||(t[4]=a=>v.value=a),label:"Factor:"},null,8,["modelValue"])]),e("div",we,[Ae,r(X,{class:"fast-first",modelValue:g.value,"onUpdate:modelValue":t[5]||(t[5]=a=>g.value=a)},null,8,["modelValue"])]),e("div",Ce,[r(b,{modelValue:x.value,"onUpdate:modelValue":t[6]||(t[6]=a=>x.value=a),step:.1,label:"Jitter Adjustment:"},null,8,["modelValue"])])]),e("div",Fe,[e("div",Ie,[De,e("div",je,[(c(!0),E(N,null,M(n.value+1,(a,F)=>{var R;return c(),K(P,{class:"attempt",key:F,modelValue:i.value[F].progress,color:i.value[F].color,max:(R=o.value)==null?void 0:R.duration},null,8,["modelValue","color","max"])}),128))])]),e("div",Te,[r(P,{class:"internal",modelValue:_.value,max:C.value,label:"Interval:"},null,8,["modelValue","max"])])])])]),_:1},8,["circuit"])]))}});const Re=L(Ve,[["__scopeId","data-v-0fada32e"]]),ke=e("h1",{id:"retry",tabindex:"-1"},[A("Retry "),e("a",{class:"header-anchor",href:"#retry","aria-label":'Permalink to "Retry"'},"​")],-1),Ne=e("p",null,[A("The "),e("code",null,"Retry"),A(" module allows you to "),e("strong",null,"retry"),A(" a function when it fails.")],-1),Me=se(`<h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> Mollitia </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;mollitia&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// Creates a circuit</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">circuit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Mollitia.</span><span style="color:#B392F0;">Circuit</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    modules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Creates a retry module</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Mollitia.</span><span style="color:#B392F0;">Retry</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        attempts: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// Will retry two times</span></span>
<span class="line"><span style="color:#E1E4E8;">        interval: </span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        mode: RetryMode.</span><span style="color:#79B8FF;">LINEAR</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        factor: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// With interval=500, mode=LINEAR and factor 1, the interval between attempts will grow linearly (500ms before 1st retry, then 1000ms before 2nd retry)</span></span>
<span class="line"><span style="color:#E1E4E8;">        onRejection: (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">attempt</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// Can help filtering error and modifying the retry behavior</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// Second parameter represent the current attempt</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// In this example, onRejection will be called 3 times</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// attempt = 0: first failure</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// attempt = 1: first retry failure</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// attempt = 2: second retry failure</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BrokenError</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// Returning false will cancel the retry attempt</span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BusyError</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// Returning a number will modify the interval time, and wait for that time before retry</span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// Returning true will retry, using the configured interval value</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> Mollitia </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;mollitia&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// Creates a circuit</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">circuit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Mollitia.</span><span style="color:#6F42C1;">Circuit</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  options: {</span></span>
<span class="line"><span style="color:#24292E;">    modules: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Creates a retry module</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Mollitia.</span><span style="color:#6F42C1;">Retry</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        attempts: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// Will retry two times</span></span>
<span class="line"><span style="color:#24292E;">        interval: </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        mode: RetryMode.</span><span style="color:#005CC5;">LINEAR</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        factor: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// With interval=500, mode=LINEAR and factor 1, the interval between attempts will grow linearly (500ms before 1st retry, then 1000ms before 2nd retry)</span></span>
<span class="line"><span style="color:#24292E;">        onRejection: (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">attempt</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// Can help filtering error and modifying the retry behavior</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// Second parameter represent the current attempt</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// In this example, onRejection will be called 3 times</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// attempt = 0: first failure</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// attempt = 1: first retry failure</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// attempt = 2: second retry failure</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BrokenError</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// Returning false will cancel the retry attempt</span></span>
<span class="line"><span style="color:#24292E;">          } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BusyError</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// Returning a number will modify the interval time, and wait for that time before retry</span></span>
<span class="line"><span style="color:#24292E;">          } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// Returning true will retry, using the configured interval value</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="modes" tabindex="-1">Modes <a class="header-anchor" href="#modes" aria-label="Permalink to &quot;Modes&quot;">​</a></h2><p>There is four possible modes could be configured for this extended retry (<a href="#constant-mode">CONSTANT</a>, <a href="#linear-mode">LINEAR</a>, <a href="#exponential-mode">EXPONENTIAL</a>, <a href="#jitter-mode">JITTER</a>)</p><h3 id="constant-mode" tabindex="-1">CONSTANT mode <a class="header-anchor" href="#constant-mode" aria-label="Permalink to &quot;CONSTANT mode&quot;">​</a></h3><p>This is the default behavior. In this mode, the delay between each retry is always the same: the one configured in the <code>interval</code> option.</p><p>For example, with interval=100, the retry delay will be 100, 100, 100, ...</p><h3 id="linear-mode" tabindex="-1">LINEAR mode <a class="header-anchor" href="#linear-mode" aria-label="Permalink to &quot;LINEAR mode&quot;">​</a></h3><p>In this mode, the delay between each retry grows linearly.</p><p>Let&#39;s call iteration the number of retry attempts already done. The delay calculation formula is:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">min(interval + (iteration * factor * interval), maxInterval)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">min(interval + (iteration * factor * interval), maxInterval)</span></span></code></pre></div><p>For example, with factor=3 and interval=100, the retry delay will be 100, 400, 700, 1000, 1300, ...</p><p><img src="`+le+'" alt="Retry - Linear Mode"></p><blockquote><p>As retry delay can grow fast, it&#39;s possible to configure maxInterval option to specify the maximum allowed delay.</p><p>For example, with factor=3, interval=100, maxInterval=800, the retry delay will be 100, 400, 700, 800, 800, ...</p></blockquote><h3 id="exponential-mode" tabindex="-1">EXPONENTIAL mode <a class="header-anchor" href="#exponential-mode" aria-label="Permalink to &quot;EXPONENTIAL mode&quot;">​</a></h3><p>In this mode, the delay between each retry grows exponentially.</p><p>Let&#39;s call iteration the number of retry attempts already done. The delay calculation formula is: (<code>interval x factor^iteration</code>)</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">min(interval * (factor ** iteration), maxInterval)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">min(interval * (factor ** iteration), maxInterval)</span></span></code></pre></div><p>For example, with factor=2 and interval=100, the retry delay will be 100, 200, 400, 800, 1600, ...</p><p><img src="'+ne+`" alt="Retry - Exponential Mode"></p><blockquote><p>As retry delay can grow fast, it&#39;s possible to configure maxInterval option to specify the maximum allowed delay.</p><p>For example, with factor=3, interval=100, maxInterval=1000, the retry delay will be 100, 300, 900, 1000, 1000, ...</p></blockquote><h3 id="jitter-mode" tabindex="-1">JITTER mode <a class="header-anchor" href="#jitter-mode" aria-label="Permalink to &quot;JITTER mode&quot;">​</a></h3><p>This mode is very close to the exponential mode, the formula is nearly the same.</p><p>The retry delay is calculated based on the exponential retry delay, with some delta around it, based on the configuration of the jitterAdjustment</p><p>Let&#39;s call iteration the number of retry attempts already done. The jitter delay calculation formula is:</p><p>(<code>interval x factor^iteration</code>) - ((<code>interval x factor^iteration</code>) <em>jitterAdjustment) + (random(0, ((<code>interval x factor^iteration</code>)</em> jitterAdjustment) * 2))</p><p>To be more precise, as there is a potential maxInterval duration, the exact calculation is:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">minValue = Math.min((interval x factor^iteration), maxInterval) * ( 1 - jitterAdjustment)</span></span>
<span class="line"><span style="color:#e1e4e8;">maxValue = Math.min((interval x factor^iteration), maxInterval) * ( 1 + jitterAdjustment)</span></span>
<span class="line"><span style="color:#e1e4e8;">waitDelay = Math.random(0, (maxValue - minValue)) + minValue</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">minValue = Math.min((interval x factor^iteration), maxInterval) * ( 1 - jitterAdjustment)</span></span>
<span class="line"><span style="color:#24292e;">maxValue = Math.min((interval x factor^iteration), maxInterval) * ( 1 + jitterAdjustment)</span></span>
<span class="line"><span style="color:#24292e;">waitDelay = Math.random(0, (maxValue - minValue)) + minValue</span></span></code></pre></div><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h4><p>With</p><ul><li>factor=2</li><li>interval=100</li><li>jitterAdjustment=0.1</li></ul><p>The retry delay for 1st retry will be a random value between 90 and 110, for 2nd retry a random value between 180 and 220, a random value between 360 and 440, ...</p><p><img src="`+oe+'" alt="Retry - Jitter Mode with 0.1 adjustment"></p><p><img src="'+re+'" alt="Retry - Jitter Mode with 0.5 adjustment"></p><p><img src="'+pe+'" alt="Retry - Jitter Mode with 1.0 adjustment"></p><blockquote><p>As retry delay can grow fast, it&#39;s possible to configure maxInterval option to specify the maximum allowed delay used for the random value as maximum boundary.</p><p>In this case, the value is calculated between MaxValue - (jitterAdjustment * MaxValue) and MaxValue.</p><p>For example, with factor=3,interval=100,maxInterval=1000,jitterAdjustment=0.2, the retry delay will be random(80,120), random(240,360), random(720,1000), random(800,1000), random(800,1000), ...</p><p>Note that the 3rd retry random range is between 720 and 1000 because 900 + 0.2*900 (the upper value of the random range) &gt; 1000 (maxInterval)</p></blockquote><h2 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">​</a></h2><h3 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Default</th></tr></thead><tbody><tr><td style="text-align:left;"><code>attempts</code></td><td style="text-align:left;">The number of retry attempts (the function will be called attempts + 1 times).</td><td style="text-align:left;"><code>2</code></td></tr><tr><td style="text-align:left;"><code>interval</code></td><td style="text-align:left;">The amount of time to wait before retrying.</td><td style="text-align:left;"><code>0</code></td></tr><tr><td style="text-align:left;"><code>fastFirst</code></td><td style="text-align:left;">The first retry is done without delay if set to true.</td><td style="text-align:left;"><code>false</code></td></tr><tr><td style="text-align:left;"><code>mode</code></td><td style="text-align:left;">The mode for retry</td><td style="text-align:left;"><code>CONSTANT</code></td></tr><tr><td style="text-align:left;"><code>factor</code></td><td style="text-align:left;">The factor to be used for retry (used only if <code>mode</code> is LINEAR, EXPONENTIAL OR JITTER)</td><td style="text-align:left;">LINEAR=<code>1</code>, <code>2</code> otherwise</td></tr><tr><td style="text-align:left;"><code>maxInterval</code></td><td style="text-align:left;">The maximum interval between each retry.</td><td style="text-align:left;"><code>INFINITY</code></td></tr><tr><td style="text-align:left;"><code>jitterAdjustment</code></td><td style="text-align:left;">The percentage to adjust delay randomly based on jitter retry duration</td><td style="text-align:left;"><code>0.1</code> (clamps from <code>0</code> to <code>1</code>)</td></tr><tr><td style="text-align:left;"><code>onRejection</code></td><td style="text-align:left;">A filtering callback, to modify the retry behavior.</td><td style="text-align:left;"><code>none</code></td></tr></tbody></table><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Returns</th></tr></thead><tbody><tr><td style="text-align:left;"><code>getExecParams()</code></td><td style="text-align:left;">Returns the circuit function parameters.</td><td style="text-align:left;"><code>any[]</code> <strong>params</strong></td></tr></tbody></table><h3 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Params</th></tr></thead><tbody><tr><td style="text-align:left;"><code>execute</code></td><td style="text-align:left;">Called when the module is executed.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong>, <code>Promise&lt;T&gt;</code> <strong>promise</strong>, <code>any[]</code> <strong>params</strong></td></tr><tr><td style="text-align:left;"><code>retry</code></td><td style="text-align:left;">Called when retrying.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong>, <code>number</code> <strong>currentAttempt</strong></td></tr><tr><td style="text-align:left;"><code>success-without-retry</code></td><td style="text-align:left;">Called the module execution succeeds without retrying.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong></td></tr><tr><td style="text-align:left;"><code>success-with-retry</code></td><td style="text-align:left;">Called the module execution succeeds after retrying.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong>, <code>number</code> <strong>attempts</strong></td></tr><tr><td style="text-align:left;"><code>failure-without-retry</code></td><td style="text-align:left;">Called the module execution fails without retrying.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong></td></tr><tr><td style="text-align:left;"><code>failure-with-retry</code></td><td style="text-align:left;">Called the module execution fails after retrying.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong>, <code>number</code> <strong>attempts</strong></td></tr><tr><td style="text-align:left;"><code>delay-before-next-retry</code></td><td style="text-align:left;">Called when the delay before next retry starts.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong>, <code>number</code> <strong>waitDuration</strong></td></tr></tbody></table>',43),Oe=JSON.parse('{"title":"Retry","description":"","frontmatter":{},"headers":[],"relativePath":"guide/api/modules/retry.md","filePath":"guide/api/modules/retry.md"}'),Pe={name:"guide/api/modules/retry.md"},Ue=Object.assign(Pe,{setup(d){return(o,n)=>{const p=ae("ClientOnly");return c(),E("div",null,[ke,Ne,r(p,null,{default:I(()=>[r(Re)]),_:1}),Me])}}});export{Oe as __pageData,Ue as default};
