import{_ as n,C as l,c as h,o as i,a2 as a,b as p,w as t,a as k,G as r,a3 as o}from"./chunks/framework.DYiJ1WDi.js";const F=JSON.parse('{"title":"Design","description":"","frontmatter":{},"headers":[],"relativePath":"guide/design.md","filePath":"guide/design.md"}'),d={name:"guide/design.md"};function E(c,s,g,y,u,m){const e=l("Mermaid");return i(),h("div",null,[s[1]||(s[1]=a('<h1 id="design" tabindex="-1">Design <a class="header-anchor" href="#design" aria-label="Permalink to &quot;Design&quot;">​</a></h1><p>Using <code>Mollitia</code> is easy as creating some <strong>Circuits</strong> that contains <strong>Modules</strong> that easily adds <code>Resilience</code> capabilities to your asynchronous operations.</p><p><code>Mollitia</code> is heavily inspired by <a href="https://github.com/resilience4j/resilience4j" target="_blank" rel="noreferrer">Resilience4j</a> and <a href="https://github.com/App-vNext/Polly" target="_blank" rel="noreferrer">Polly</a>.</p><p>It provides a collection of <code>Modules</code> that can be attached to a <a href="./api/circuit">Circuit</a>.</p><p>You can then execute a asynchronous operation on the circuit, and the attached modules will be triggered when needed.</p>',5)),(i(),p(o,null,{default:t(()=>[r(e,{id:"mermaid-15",class:"mermaid",graph:"stateDiagram%0A%20%20A%3A%20circuit.execute()%0A%09B%3A%20Circuit%0A%09C%3A%20Module%201%0A%09D%3A%20Module%202%0A%09E%3A%20Module%20N%0A%09F%3A%20Async%20Function%0A%09G%3A%20response%0A%09direction%20LR%0A%09%5B*%5D%20--%3E%20A%0A%09A%20--%3E%20B%0A%09state%20B%20%7B%0A%09%09direction%20LR%0A%09%09C%20--%3E%20D%0A%09%09D%20--%3E%20E%0A%09%09E%20--%3E%20F%0A%09%7D%0A%09B%20--%3E%20G%0A"})]),fallback:t(()=>s[0]||(s[0]=[k(" Loading... ")])),_:1})),s[2]||(s[2]=a(`<p>Adding modules to your circuit will add logic to it, but be careful, <strong>the module ordering have an importance!</strong> Let&#39;s see with an example:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mollitia </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mollitia&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creates a Retry Module</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> retry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mollitia.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Retry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  attempts: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Will retry two times</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mollitia.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  delay: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Will timeout after 500ms</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creates Circuits</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> retryWithTimeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mollitia.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Circuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modules: [retry, timeout]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timeoutRetries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mollitia.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Circuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modules: [timeout, retry]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="retry-with-timeout" tabindex="-1">Retry with Timeout <a class="header-anchor" href="#retry-with-timeout" aria-label="Permalink to &quot;Retry with Timeout&quot;">​</a></h3><p>Here is what will happen with the first circuit:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">retryWithTimeout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(failureAsync).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dummy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Launches the failureAsync method, that will return &quot;dummy&quot;, and will take 1000ms to complete</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Attempt #1: The function times out (1000 &gt; 500) - Launches First Retry</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Attempt #2: The function times out (1000 &gt; 500) - Launches Second Retry</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Attempt #3: The function times out (1000 &gt; 500) - Fails with TimeoutError</span></span></code></pre></div><h3 id="timeout-retries" tabindex="-1">Timeout Retries <a class="header-anchor" href="#timeout-retries" aria-label="Permalink to &quot;Timeout Retries&quot;">​</a></h3><p>Here is what will happen with the second circuit:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">timeoutRetries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(failureAsync).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dummy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Exactly like before</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Attempt #1: The function times out (1000 &gt; 500) - Fails with TimeoutError</span></span></code></pre></div><p>Because the <a href="./api/modules/timeout">Timeout</a> module is set before the <a href="./api/modules/retry">Retry</a> module, the timeout is global for all attempts.</p><p>Therefore, the Circuit does have time to make a retry, it times out before.</p>`,10))])}const C=n(d,[["render",E]]);export{F as __pageData,C as default};
