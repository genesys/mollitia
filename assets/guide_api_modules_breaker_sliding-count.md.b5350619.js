import{_ as B}from"./chunks/circuit-breaker-diagram.7c56a8fe.js";import{P as w,a as k,V as R,N as o,C as V}from"./chunks/circuit.96ad7feb.js";import{P as N}from"./chunks/progress-bar.d9b4ef32.js";import{d as I,h as t,x as i,j as P,z as H,o as A,c as S,H as l,w as O,k as s,N as M,t as W,l as q,p as z,m as U,_ as L,C as $,a as j,Q as J}from"./chunks/framework.b96a75df.js";import"./chunks/theme.a2ff1341.js";const Q=u=>(z("data-v-acaa3a2a"),u=u(),U(),u),G={class:"sliding-count"},K={class:"content"},X={class:"form"},Y={class:"row"},Z={class:"row"},ss={class:"row"},es={class:"row"},as={class:"row"},ts={class:"row"},ls={class:"row"},ns={class:"row"},os={class:"visualization"},is={class:"row state"},ps=Q(()=>s("label",null,"State:",-1)),rs={class:"row"},cs=I({__name:"sliding-count",setup(u){const F=t(null),c=t(4),p=t(2),y=t(60),h=t(1e3),E=t(50),f=t(2),r=t(3e3),d=t(6e3),m=t(0),C=t(r.value),x=t(0),v=t(0),g=t("var(--vp-c-green-2)"),b=t(w.CLOSED),n=new k({slidingWindowSize:c.value,minimumNumberOfCalls:p.value,failureRateThreshold:y.value,slowCallDurationThreshold:h.value,slowCallRateThreshold:E.value,permittedNumberOfCallsInHalfOpenState:f.value,openStateDelay:r.value,halfOpenStateMaxDelay:d.value}),T=new R({options:{modules:[n]}});i([c],()=>{n.slidingWindowSize=c.value}),i([p],()=>{n.minimumNumberOfCalls=p.value}),i([y],()=>{n.failureRateThreshold=y.value}),i([h],()=>{n.slowCallDurationThreshold=h.value}),i([E],()=>{n.slowCallRateThreshold=E.value}),i([f],()=>{n.permittedNumberOfCallsInHalfOpenState=f.value}),i([r],()=>{n.openStateDelay=r.value}),i([d],()=>{n.halfOpenStateMaxDelay=d.value});function _(D){switch(clearInterval(v.value),m.value=0,b.value=D,D){case w.CLOSED:{g.value="var(--vp-c-green-2)";break}case w.HALF_OPENED:{C.value=d.value,g.value="var(--vp-c-yellow-2)";break}case w.OPENED:{C.value=r.value,g.value="var(--vp-c-red-2)";break}}x.value=Date.now(),b.value!==w.CLOSED?v.value=window.setInterval(()=>{m.value=Date.now()-x.value,m.value>=C.value&&clearInterval(v.value)},100):m.value=0}return P(()=>{n.on("state-changed",_)}),H(()=>{n.off("state-changed",_)}),(D,e)=>(A(),S("div",G,[l(V,{ref_key:"circuitRef",ref:F,circuit:q(T)},{default:O(()=>[s("div",K,[s("div",X,[s("div",Y,[l(o,{modelValue:c.value,"onUpdate:modelValue":e[0]||(e[0]=a=>c.value=a),label:"Window Size:"},null,8,["modelValue"])]),s("div",Z,[l(o,{modelValue:p.value,"onUpdate:modelValue":e[1]||(e[1]=a=>p.value=a),label:"Minimum number of calls:"},null,8,["modelValue"])]),s("div",ss,[l(o,{modelValue:y.value,"onUpdate:modelValue":e[2]||(e[2]=a=>y.value=a),label:"Failure Rate Threshold (in %):"},null,8,["modelValue"])]),s("div",es,[l(o,{modelValue:h.value,"onUpdate:modelValue":e[3]||(e[3]=a=>h.value=a),label:"Slow Call Duration Threshold (in ms):"},null,8,["modelValue"])]),s("div",as,[l(o,{modelValue:E.value,"onUpdate:modelValue":e[4]||(e[4]=a=>E.value=a),label:"Slow Call Rate Threshold (in %):"},null,8,["modelValue"])]),s("div",ts,[l(o,{modelValue:f.value,"onUpdate:modelValue":e[5]||(e[5]=a=>f.value=a),label:"Number of calls in Half Open State:"},null,8,["modelValue"])]),s("div",ls,[l(o,{modelValue:r.value,"onUpdate:modelValue":e[6]||(e[6]=a=>r.value=a),label:"Delay to stay in Open State (in ms):"},null,8,["modelValue"])]),s("div",ns,[l(o,{modelValue:d.value,"onUpdate:modelValue":e[7]||(e[7]=a=>d.value=a),label:"Max Delay to stay in Half Open State (in ms):"},null,8,["modelValue"])])]),s("div",os,[s("div",is,[ps,s("div",{class:"bullet",style:M({backgroundColor:g.value})},null,4),s("span",null,W(b.value),1)]),s("div",rs,[l(N,{class:"internal",modelValue:m.value,color:g.value,max:C.value,label:"Breaker Duration:"},null,8,["modelValue","color","max"])])])])]),_:1},8,["circuit"])]))}});const ds=L(cs,[["__scopeId","data-v-acaa3a2a"]]),us=s("h1",{id:"sliding-count",tabindex:"-1"},[j("Sliding Count "),s("a",{class:"header-anchor",href:"#sliding-count","aria-label":'Permalink to "Sliding Count"'},"​")],-1),ys=J(`<h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>The Circuit Breaker has 3 possible states:</p><ul><li><code>CLOSED</code></li><li><code>OPEN</code></li><li><code>HALF_OPEN</code></li></ul><p>When the circuit is opened, all the iterations are failing fast</p><p>When the circuit is half opened, a certain number of iterations are authorized. When this number is reached, the failure and slow call rate thresholds are checked to see if the circuit should be opened or closed.</p><p>When the circuit is closed, a sliding window is used to store the outcome of calls. The count-based sliding window calculates the outcome of the last N calls, and decides if the circuit should be opened (if the failure or slow call rate thresholds are exceeded) For example, if the count window size is 10, the circular array has always 10 measurements.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> Mollitia </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;mollitia&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// Creates a circuit</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">circuit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Mollitia.</span><span style="color:#B392F0;">Circuit</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&#39;my-circuit&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    modules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// Creates Sliding Count Breaker Module</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Mollitia.</span><span style="color:#B392F0;">SlidingCountBreaker</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">				name: </span><span style="color:#9ECBFF;">&#39;my-sliding-count-breaker&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">				slidingWindowSize: </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// Failure Rate Calculation is done on the last 6 iterations</span></span>
<span class="line"><span style="color:#E1E4E8;">				minimumNumberOfCalls: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 3 iterations are needed to start calculating the failure rate, and see if circuit should be opened or not</span></span>
<span class="line"><span style="color:#E1E4E8;">				failureRateThreshold: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// If half of the iterations or more are failing, the circuit is switched to Opened state.</span></span>
<span class="line"><span style="color:#E1E4E8;">				slowCallDurationThreshold: </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// An iteration is considered as being slow if the iteration lasts more than 1s</span></span>
<span class="line"><span style="color:#E1E4E8;">				slowCallRateThreshold: </span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// If at least 80% of the iterations are considered as being slow, the circuit is switched to Opened state.</span></span>
<span class="line"><span style="color:#E1E4E8;">				permittedNumberOfCallsInHalfOpenState: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// When the circuit is in Half Opened state, the circuit accepts 2 iterations in this state.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// Once these 2 iterations are received, failure rate is calculated on these iterations.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// If failure rate is lower than failureRateThreshold, the circuit is switched to Closed state.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// If the failure rate is higher or equal to failureRateThreshold, the circuit is switched to Opened state.</span></span>
<span class="line"><span style="color:#E1E4E8;">				openStateDelay: </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// The circuit stays in Opened state for 10s</span></span>
<span class="line"><span style="color:#E1E4E8;">			})</span></span>
<span class="line"><span style="color:#E1E4E8;">		]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> circuit.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(myFunction).</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> circuit.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(myFunction2).</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// When this 3rd iteration is received, failureRate and slowCallRate is calculated</span></span>
<span class="line"><span style="color:#6A737D;">// If the 3 iterations lasts less than 1s and are all success, then the circuit is still closed</span></span>
<span class="line"><span style="color:#6A737D;">// The circuit is opened if:</span></span>
<span class="line"><span style="color:#6A737D;">//   - at least 2 iterations failed (failure rate is 66% (2 iterations failing) or 100% (3 iterations failing), which is &gt; 50 (failureRateThreshold))</span></span>
<span class="line"><span style="color:#6A737D;">//   - or all the iterations are slow (as slowCallRateThreshold is 80%)</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> circuit.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(myFunction3).</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// If</span></span>
<span class="line"><span style="color:#6A737D;">//   - circuit is still closed, then the failure rate and slow call rate threshold will be calculated when a new iteration is received</span></span>
<span class="line"><span style="color:#6A737D;">//   - circuit is opened, then the iterations are failing fast</span></span>
<span class="line"><span style="color:#6A737D;">// Here, 4th iteration received. Calculation will be done on the 4th iterations</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> circuit.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(myFunction4).</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// Here, 5th iteration received. Calculation will be done on the 4 iterations</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> circuit.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(myFunction5).</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// Here, 6th iteration received. Calculation will be done on the 6 iterations</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> circuit.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(myFunction6).</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// Here, number of iterations is 7. So, the 1st iteration is no longer taken into account and the calculation is done on iterations 2 to 7 </span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> circuit.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(myFunction7).</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> Mollitia </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;mollitia&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// Creates a circuit</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">circuit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Mollitia.</span><span style="color:#6F42C1;">Circuit</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;my-circuit&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  options: {</span></span>
<span class="line"><span style="color:#24292E;">    modules: [</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// Creates Sliding Count Breaker Module</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Mollitia.</span><span style="color:#6F42C1;">SlidingCountBreaker</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">				name: </span><span style="color:#032F62;">&#39;my-sliding-count-breaker&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">				slidingWindowSize: </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// Failure Rate Calculation is done on the last 6 iterations</span></span>
<span class="line"><span style="color:#24292E;">				minimumNumberOfCalls: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 3 iterations are needed to start calculating the failure rate, and see if circuit should be opened or not</span></span>
<span class="line"><span style="color:#24292E;">				failureRateThreshold: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// If half of the iterations or more are failing, the circuit is switched to Opened state.</span></span>
<span class="line"><span style="color:#24292E;">				slowCallDurationThreshold: </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// An iteration is considered as being slow if the iteration lasts more than 1s</span></span>
<span class="line"><span style="color:#24292E;">				slowCallRateThreshold: </span><span style="color:#005CC5;">80</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// If at least 80% of the iterations are considered as being slow, the circuit is switched to Opened state.</span></span>
<span class="line"><span style="color:#24292E;">				permittedNumberOfCallsInHalfOpenState: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// When the circuit is in Half Opened state, the circuit accepts 2 iterations in this state.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// Once these 2 iterations are received, failure rate is calculated on these iterations.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// If failure rate is lower than failureRateThreshold, the circuit is switched to Closed state.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// If the failure rate is higher or equal to failureRateThreshold, the circuit is switched to Opened state.</span></span>
<span class="line"><span style="color:#24292E;">				openStateDelay: </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// The circuit stays in Opened state for 10s</span></span>
<span class="line"><span style="color:#24292E;">			})</span></span>
<span class="line"><span style="color:#24292E;">		]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> circuit.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(myFunction).</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> circuit.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(myFunction2).</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// When this 3rd iteration is received, failureRate and slowCallRate is calculated</span></span>
<span class="line"><span style="color:#6A737D;">// If the 3 iterations lasts less than 1s and are all success, then the circuit is still closed</span></span>
<span class="line"><span style="color:#6A737D;">// The circuit is opened if:</span></span>
<span class="line"><span style="color:#6A737D;">//   - at least 2 iterations failed (failure rate is 66% (2 iterations failing) or 100% (3 iterations failing), which is &gt; 50 (failureRateThreshold))</span></span>
<span class="line"><span style="color:#6A737D;">//   - or all the iterations are slow (as slowCallRateThreshold is 80%)</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> circuit.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(myFunction3).</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// If</span></span>
<span class="line"><span style="color:#6A737D;">//   - circuit is still closed, then the failure rate and slow call rate threshold will be calculated when a new iteration is received</span></span>
<span class="line"><span style="color:#6A737D;">//   - circuit is opened, then the iterations are failing fast</span></span>
<span class="line"><span style="color:#6A737D;">// Here, 4th iteration received. Calculation will be done on the 4th iterations</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> circuit.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(myFunction4).</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// Here, 5th iteration received. Calculation will be done on the 4 iterations</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> circuit.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(myFunction5).</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// Here, 6th iteration received. Calculation will be done on the 6 iterations</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> circuit.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(myFunction6).</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// Here, number of iterations is 7. So, the 1st iteration is no longer taken into account and the calculation is done on iterations 2 to 7 </span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> circuit.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(myFunction7).</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">();</span></span></code></pre></div><p><img src="`+B+'" alt="Circuit Breaker - Diagram"></p><h2 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">​</a></h2><h3 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Default</th></tr></thead><tbody><tr><td style="text-align:left;"><code>state</code></td><td style="text-align:left;">Specifies the circuit state</td><td style="text-align:left;"><code>CLOSED</code></td></tr><tr><td style="text-align:left;"><code>failureRateThreshold</code></td><td style="text-align:left;">Specifies the failure rate threshold in percentage</td><td style="text-align:left;"><code>50</code></td></tr><tr><td style="text-align:left;"><code>slowCallRateThreshold</code></td><td style="text-align:left;">Specifies the slow duration threshold. A call is considered <strong>slow</strong> when duration <code>&gt;=</code> than <code>slowCallDurationThreshold</code></td><td style="text-align:left;"><code>100</code></td></tr><tr><td style="text-align:left;"><code>slowCallDurationThreshold</code></td><td style="text-align:left;">Specifies the duration (in ms) threshold above which calls are considered as slow</td><td style="text-align:left;"><code>60000</code></td></tr><tr><td style="text-align:left;"><code>permittedNumberOfCallsInHalfOpenState</code></td><td style="text-align:left;">Specifies the number of permitted calls when the circuit is half open</td><td style="text-align:left;"><code>2</code></td></tr><tr><td style="text-align:left;"><code>halfOpenStateMaxDelay</code></td><td style="text-align:left;">Specifies the maximum wait (in ms) in Half Open State, before switching back to open. 0 deactivates this</td><td style="text-align:left;"><code>0</code></td></tr><tr><td style="text-align:left;"><code>slidingWindowSize</code></td><td style="text-align:left;">Specifies the maximum number of calls used to calculate failure and slow call rate percentages</td><td style="text-align:left;"><code>10</code></td></tr><tr><td style="text-align:left;"><code>minimumNumberOfCalls</code></td><td style="text-align:left;">Specifies the minimum number of calls used to calculate failure and slow call rate percentages</td><td style="text-align:left;"><code>10</code></td></tr><tr><td style="text-align:left;"><code>openStateDelay</code></td><td style="text-align:left;">Specifies the time (in ms) the circuit stay opened before switching to half-open</td><td style="text-align:left;"><code>60000</code></td></tr><tr><td style="text-align:left;"><code>onError</code></td><td style="text-align:left;">Allows filtering of the error to report as a failure or not.</td><td style="text-align:left;"><code>None</code></td></tr></tbody></table><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Returns</th></tr></thead><tbody><tr><td style="text-align:left;"><code>getExecParams()</code></td><td style="text-align:left;">Returns the circuit function parameters.</td><td style="text-align:left;"><code>any[]</code> <strong>params</strong></td></tr></tbody></table><h3 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Params</th></tr></thead><tbody><tr><td style="text-align:left;"><code>execute</code></td><td style="text-align:left;">Called when the module is executed.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong>, <code>Promise&lt;T&gt;</code> <strong>promise</strong>, <code>any[]</code> <strong>params</strong></td></tr><tr><td style="text-align:left;"><code>state-changed</code></td><td style="text-align:left;">Called when the breaker state changes.</td><td style="text-align:left;"><code>Mollitia.BreakerState</code> <strong>state</strong></td></tr></tbody></table>',15),Cs=JSON.parse('{"title":"Sliding Count","description":"","frontmatter":{},"headers":[],"relativePath":"guide/api/modules/breaker/sliding-count.md","filePath":"guide/api/modules/breaker/sliding-count.md"}'),hs={name:"guide/api/modules/breaker/sliding-count.md"},vs=Object.assign(hs,{setup(u){return(F,c)=>{const p=$("ClientOnly");return A(),S("div",null,[us,l(p,null,{default:O(()=>[l(ds)]),_:1}),ys])}}});export{Cs as __pageData,vs as default};
