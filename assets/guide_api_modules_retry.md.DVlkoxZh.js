import{F as N,X as J,V as $}from"./chunks/theme.CFNbPdFi.js";import{C as X,N as E,T as W}from"./chunks/circuit.y_FAFz-t.js";import{d as q,c as m,o as p,j as t,e as z,t as B,r as G,_ as O,p as l,q as u,v as Y,x as H,G as r,k as K,w as C,F as R,B as M,b as Q,C as Z,a2 as ee,a as A}from"./chunks/framework.DYiJ1WDi.js";import{P}from"./chunks/progress-bar.DdOpSzUH.js";const te="/mollitia/img/retry-linear-mode.png",ae="/mollitia/img/retry-exponential-mode.png",se="/mollitia/img/retry-jitter-mode-adjust0.1.png",ie="/mollitia/img/retry-jitter-mode-adjust0.5.png",le="/mollitia/img/retry-jitter-mode-adjust1.0.png",ne={class:"number"},re={key:0,class:"label"},oe=["value"],de=q({__name:"select",props:{modelValue:{default:""},label:{}},emits:["update:modelValue"],setup(w){const n=w;return(a,o)=>(p(),m("div",ne,[t("label",null,[n.label?(p(),m("span",re,B(n.label),1)):z("",!0),t("select",{value:n.modelValue,onInput:o[0]||(o[0]=h=>a.$emit("update:modelValue",h.target.value))},[G(a.$slots,"default",{},void 0,!0)],40,oe)])]))}}),pe=O(de,[["__scopeId","data-v-0900e5ef"]]),he={class:"timeout"},ce={class:"content"},ue={class:"form"},me={class:"row"},ye={class:"row"},ke={class:"row"},ge={class:"row"},fe=["value"],ve={class:"row"},Ee={class:"row"},xe={class:"row"},be={class:"visualization"},Ae={class:"row"},we={class:"progress"},Fe={class:"row"},_e=q({__name:"retry",setup(w){const n=l(null),a=l(2),o=l(1e3),h=l(2500),k=l(N.CONSTANT),g=l(2),f=l(!1),v=l(.1),y=l(0),d=l(new Array(a.value+1).fill({progress:0,color:"var(--vp-c-brand-3)"})),x=l(0),F=l(0),b=l(0),c=l(0),i=new J({attempts:a.value,interval:o.value,maxInterval:h.value,mode:k.value,factor:g.value,fastFirst:f.value,jitterAdjustment:v.value}),L=new $({options:{modules:[i]}});u([a],()=>{i.attempts=a.value,d.value=new Array(a.value+1).fill({progress:0,color:"var(--vp-c-brand-3)"})}),u([o],()=>{i.interval=o.value}),u([h],()=>{i.maxInterval=h.value}),u([k],()=>{i.mode=k.value}),u([g],()=>{i.factor=g.value}),u([f],()=>{i.fastFirst=f.value}),u([v],()=>{i.jitterAdjustment=v.value});function D(){b.value=Date.now(),c.value=window.setInterval(()=>{d.value[y.value]={progress:Date.now()-b.value,color:"var(--vp-c-brand-3)"},d.value[y.value].progress>=n.value.duration&&clearInterval(c.value)},100)}function I(){y.value=0,d.value=new Array(a.value+1).fill({progress:0,color:"var(--vp-c-brand-3)"}),D()}function T(){clearInterval(c.value),y.value++,D()}function j(U,e){n.value.logs.push(`Waiting for ${e}ms before next attempt...`),clearInterval(c.value),d.value[y.value]={progress:n.value.duration,color:"var(--vp-c-red-3)"},F.value=e,b.value=Date.now(),c.value=window.setInterval(()=>{x.value=Date.now()-b.value,x.value>=e&&clearInterval(c.value)},100)}function S(){clearInterval(c.value),d.value[y.value]={progress:n.value.duration,color:"var(--vp-c-red-3)"},x.value=F.value}return Y(()=>{i.on("execute",I),i.on("retry",T),i.on("delay-before-next-retry",j)}),H(()=>{i.off("execute",I),i.off("retry",T),i.off("delay-before-next-retry",j)}),(U,e)=>(p(),m("div",he,[r(X,{ref_key:"circuitRef",ref:n,circuit:K(L),duration:1e3,onFailure:S},{default:C(()=>[t("div",ce,[t("div",ue,[t("div",me,[r(E,{modelValue:a.value,"onUpdate:modelValue":e[0]||(e[0]=s=>a.value=s),label:"Attempts:"},null,8,["modelValue"])]),t("div",ye,[r(E,{modelValue:o.value,"onUpdate:modelValue":e[1]||(e[1]=s=>o.value=s),label:"Interval (in ms):"},null,8,["modelValue"])]),t("div",ke,[r(E,{modelValue:h.value,"onUpdate:modelValue":e[2]||(e[2]=s=>h.value=s),label:"Max Interval (in ms):"},null,8,["modelValue"])]),t("div",ge,[r(pe,{modelValue:k.value,"onUpdate:modelValue":e[3]||(e[3]=s=>k.value=s),label:"Mode:"},{default:C(()=>[(p(!0),m(R,null,M(Object.values(N),s=>(p(),m("option",{key:s,value:s},B(s.toUpperCase()),9,fe))),128))]),_:1},8,["modelValue"])]),t("div",ve,[r(E,{modelValue:g.value,"onUpdate:modelValue":e[4]||(e[4]=s=>g.value=s),label:"Factor:"},null,8,["modelValue"])]),t("div",Ee,[e[7]||(e[7]=t("span",null,"Fast First:",-1)),r(W,{class:"fast-first",modelValue:f.value,"onUpdate:modelValue":e[5]||(e[5]=s=>f.value=s)},null,8,["modelValue"])]),t("div",xe,[r(E,{modelValue:v.value,"onUpdate:modelValue":e[6]||(e[6]=s=>v.value=s),step:.1,label:"Jitter Adjustment:"},null,8,["modelValue"])])]),t("div",be,[t("div",Ae,[e[8]||(e[8]=t("span",null,"Progress:",-1)),t("div",we,[(p(!0),m(R,null,M(a.value+1,(s,_)=>{var V;return p(),Q(P,{class:"attempt",key:_,modelValue:d.value[_].progress,color:d.value[_].color,max:(V=n.value)==null?void 0:V.duration},null,8,["modelValue","color","max"])}),128))])]),t("div",Fe,[r(P,{class:"internal",modelValue:x.value,max:F.value,label:"Interval:"},null,8,["modelValue","max"])])])])]),_:1},8,["circuit"])]))}}),Ce=O(_e,[["__scopeId","data-v-0fada32e"]]),Ne=JSON.parse('{"title":"Retry","description":"","frontmatter":{},"headers":[],"relativePath":"guide/api/modules/retry.md","filePath":"guide/api/modules/retry.md"}'),De={name:"guide/api/modules/retry.md"},Re=Object.assign(De,{setup(w){return(n,a)=>{const o=Z("ClientOnly");return p(),m("div",null,[a[0]||(a[0]=t("h1",{id:"retry",tabindex:"-1"},[A("Retry "),t("a",{class:"header-anchor",href:"#retry","aria-label":'Permalink to "Retry"'},"​")],-1)),a[1]||(a[1]=t("p",null,[A("The "),t("code",null,"Retry"),A(" module allows you to "),t("strong",null,"retry"),A(" a function when it fails.")],-1)),r(o,null,{default:C(()=>[r(Ce)]),_:1}),a[2]||(a[2]=ee(`<h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mollitia </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mollitia&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creates a circuit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mollitia.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Circuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modules: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Creates a retry module</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mollitia.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Retry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        attempts: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Will retry two times</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        interval: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mode: RetryMode.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LINEAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        factor: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // With interval=500, mode=LINEAR and factor 1, the interval between attempts will grow linearly (500ms before 1st retry, then 1000ms before 2nd retry)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        onRejection: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">attempt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Can help filtering error and modifying the retry behavior</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // Second parameter represent the current attempt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // In this example, onRejection will be called 3 times</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // attempt = 0: first failure</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // attempt = 1: first retry failure</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // attempt = 2: second retry failure</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BrokenError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returning false will cancel the retry attempt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BusyError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returning a number will modify the interval time, and wait for that time before retry</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returning true will retry, using the configured interval value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="modes" tabindex="-1">Modes <a class="header-anchor" href="#modes" aria-label="Permalink to &quot;Modes&quot;">​</a></h2><p>There is four possible modes could be configured for this extended retry (<a href="#constant-mode">CONSTANT</a>, <a href="#linear-mode">LINEAR</a>, <a href="#exponential-mode">EXPONENTIAL</a>, <a href="#jitter-mode">JITTER</a>)</p><h3 id="constant-mode" tabindex="-1">CONSTANT mode <a class="header-anchor" href="#constant-mode" aria-label="Permalink to &quot;CONSTANT mode&quot;">​</a></h3><p>This is the default behavior. In this mode, the delay between each retry is always the same: the one configured in the <code>interval</code> option.</p><p>For example, with interval=100, the retry delay will be 100, 100, 100, ...</p><h3 id="linear-mode" tabindex="-1">LINEAR mode <a class="header-anchor" href="#linear-mode" aria-label="Permalink to &quot;LINEAR mode&quot;">​</a></h3><p>In this mode, the delay between each retry grows linearly.</p><p>Let&#39;s call iteration the number of retry attempts already done. The delay calculation formula is:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>min(interval + (iteration * factor * interval), maxInterval)</span></span></code></pre></div><p>For example, with factor=3 and interval=100, the retry delay will be 100, 400, 700, 1000, 1300, ...</p><p><img src="`+te+'" alt="Retry - Linear Mode"></p><blockquote><p>As retry delay can grow fast, it&#39;s possible to configure maxInterval option to specify the maximum allowed delay.</p><p>For example, with factor=3, interval=100, maxInterval=800, the retry delay will be 100, 400, 700, 800, 800, ...</p></blockquote><h3 id="exponential-mode" tabindex="-1">EXPONENTIAL mode <a class="header-anchor" href="#exponential-mode" aria-label="Permalink to &quot;EXPONENTIAL mode&quot;">​</a></h3><p>In this mode, the delay between each retry grows exponentially.</p><p>Let&#39;s call iteration the number of retry attempts already done. The delay calculation formula is: (<code>interval x factor^iteration</code>)</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>min(interval * (factor ** iteration), maxInterval)</span></span></code></pre></div><p>For example, with factor=2 and interval=100, the retry delay will be 100, 200, 400, 800, 1600, ...</p><p><img src="'+ae+`" alt="Retry - Exponential Mode"></p><blockquote><p>As retry delay can grow fast, it&#39;s possible to configure maxInterval option to specify the maximum allowed delay.</p><p>For example, with factor=3, interval=100, maxInterval=1000, the retry delay will be 100, 300, 900, 1000, 1000, ...</p></blockquote><h3 id="jitter-mode" tabindex="-1">JITTER mode <a class="header-anchor" href="#jitter-mode" aria-label="Permalink to &quot;JITTER mode&quot;">​</a></h3><p>This mode is very close to the exponential mode, the formula is nearly the same.</p><p>The retry delay is calculated based on the exponential retry delay, with some delta around it, based on the configuration of the jitterAdjustment</p><p>Let&#39;s call iteration the number of retry attempts already done. The jitter delay calculation formula is:</p><p>(<code>interval x factor^iteration</code>) - ((<code>interval x factor^iteration</code>) <em>jitterAdjustment) + (random(0, ((<code>interval x factor^iteration</code>)</em> jitterAdjustment) * 2))</p><p>To be more precise, as there is a potential maxInterval duration, the exact calculation is:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>minValue = Math.min((interval x factor^iteration), maxInterval) * ( 1 - jitterAdjustment)</span></span>
<span class="line"><span>maxValue = Math.min((interval x factor^iteration), maxInterval) * ( 1 + jitterAdjustment)</span></span>
<span class="line"><span>waitDelay = Math.random(0, (maxValue - minValue)) + minValue</span></span></code></pre></div><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h4><p>With</p><ul><li>factor=2</li><li>interval=100</li><li>jitterAdjustment=0.1</li></ul><p>The retry delay for 1st retry will be a random value between 90 and 110, for 2nd retry a random value between 180 and 220, a random value between 360 and 440, ...</p><p><img src="`+se+'" alt="Retry - Jitter Mode with 0.1 adjustment"></p><p><img src="'+ie+'" alt="Retry - Jitter Mode with 0.5 adjustment"></p><p><img src="'+le+'" alt="Retry - Jitter Mode with 1.0 adjustment"></p><blockquote><p>As retry delay can grow fast, it&#39;s possible to configure maxInterval option to specify the maximum allowed delay used for the random value as maximum boundary.</p><p>In this case, the value is calculated between MaxValue - (jitterAdjustment * MaxValue) and MaxValue.</p><p>For example, with factor=3,interval=100,maxInterval=1000,jitterAdjustment=0.2, the retry delay will be random(80,120), random(240,360), random(720,1000), random(800,1000), random(800,1000), ...</p><p>Note that the 3rd retry random range is between 720 and 1000 because 900 + 0.2*900 (the upper value of the random range) &gt; 1000 (maxInterval)</p></blockquote><h2 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">​</a></h2><h3 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Default</th></tr></thead><tbody><tr><td style="text-align:left;"><code>attempts</code></td><td style="text-align:left;">The number of retry attempts (the function will be called attempts + 1 times).</td><td style="text-align:left;"><code>2</code></td></tr><tr><td style="text-align:left;"><code>interval</code></td><td style="text-align:left;">The amount of time to wait before retrying.</td><td style="text-align:left;"><code>0</code></td></tr><tr><td style="text-align:left;"><code>fastFirst</code></td><td style="text-align:left;">The first retry is done without delay if set to true.</td><td style="text-align:left;"><code>false</code></td></tr><tr><td style="text-align:left;"><code>mode</code></td><td style="text-align:left;">The mode for retry</td><td style="text-align:left;"><code>CONSTANT</code></td></tr><tr><td style="text-align:left;"><code>factor</code></td><td style="text-align:left;">The factor to be used for retry (used only if <code>mode</code> is LINEAR, EXPONENTIAL OR JITTER)</td><td style="text-align:left;">LINEAR=<code>1</code>, <code>2</code> otherwise</td></tr><tr><td style="text-align:left;"><code>maxInterval</code></td><td style="text-align:left;">The maximum interval between each retry.</td><td style="text-align:left;"><code>INFINITY</code></td></tr><tr><td style="text-align:left;"><code>jitterAdjustment</code></td><td style="text-align:left;">The percentage to adjust delay randomly based on jitter retry duration</td><td style="text-align:left;"><code>0.1</code> (clamps from <code>0</code> to <code>1</code>)</td></tr><tr><td style="text-align:left;"><code>onRejection</code></td><td style="text-align:left;">A filtering callback, to modify the retry behavior.</td><td style="text-align:left;"><code>none</code></td></tr></tbody></table><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Returns</th></tr></thead><tbody><tr><td style="text-align:left;"><code>getExecParams()</code></td><td style="text-align:left;">Returns the circuit function parameters.</td><td style="text-align:left;"><code>any[]</code> <strong>params</strong></td></tr></tbody></table><h3 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Params</th></tr></thead><tbody><tr><td style="text-align:left;"><code>execute</code></td><td style="text-align:left;">Called when the module is executed.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong>, <code>Promise&lt;T&gt;</code> <strong>promise</strong>, <code>any[]</code> <strong>params</strong></td></tr><tr><td style="text-align:left;"><code>retry</code></td><td style="text-align:left;">Called when retrying.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong>, <code>number</code> <strong>currentAttempt</strong></td></tr><tr><td style="text-align:left;"><code>success-without-retry</code></td><td style="text-align:left;">Called the module execution succeeds without retrying.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong></td></tr><tr><td style="text-align:left;"><code>success-with-retry</code></td><td style="text-align:left;">Called the module execution succeeds after retrying.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong>, <code>number</code> <strong>attempts</strong></td></tr><tr><td style="text-align:left;"><code>failure-without-retry</code></td><td style="text-align:left;">Called the module execution fails without retrying.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong></td></tr><tr><td style="text-align:left;"><code>failure-with-retry</code></td><td style="text-align:left;">Called the module execution fails after retrying.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong>, <code>number</code> <strong>attempts</strong></td></tr><tr><td style="text-align:left;"><code>delay-before-next-retry</code></td><td style="text-align:left;">Called when the delay before next retry starts.</td><td style="text-align:left;"><code>Mollitia.Circuit</code> <strong>circuit</strong>, <code>number</code> <strong>waitDuration</strong></td></tr></tbody></table>',43))])}}});export{Ne as __pageData,Re as default};
